Utorzenie/inicjacja
	git init 		- tworzenie nowego repo w katalogu w którym została wydana

Klonowanie:
	git clone <nazwa repozytorium>  np: git@github.com:tomasztaw/kurs_gita.git

Sprawdzanie plików w workspace:
	git status
	git status -uall	- pokazuje wszystkie zmiany w katalogach

Konfiguracja na "tym" systemie:
	git config --global user.name <nazwa/alias>
	git config --global user.email <twoj email z githuba>

Dodawanie plików do śledzenia:
	git add <nazwa pliku>	- dodanie pojedyńczego pliku
	git add . 		- dodanie wszystkich plików w katalogu
	git add -A		- 	-----||-----

Komit:
	git commit -m "treść komitu"

Branch/gałęźie:
	git branch		- sprawdzanie dostępnych gałęzi
	git branch <nazwa>	- tworzenie brancha
	git checkout <nazwa>	- przełańczanie się na konkretnego brancha
	git checkout -		- powrót na poprzedniego brancha
	git checkout -b <nazwa> - tworzenie i jednoczesne przepięcie się na brancha

Rysowanie grafa w konsoli:
	git log --oneline --graph --all		- logowanie, nagłówek, graf, dla wszystkiego

Merdzowanie/łączenie gałęźi:
	git merge <nazwa brancha>	- należy pamiętać o tym, że musimy być na branch do którego chcemy przyłączyć zmiany !!!

Chowanie do schowka:
	git stach		- schowanie do schowka obecnych zmian
	git stach list		- sprawdzenie zawartości schowka
	
	git stash apply		- pobranie pierwszych zmian z góry z pozostawieniem ich na liście
	git stash pop		- pobranie zmian z góry i usunięcie z listy staszów
	git stash pop stash@{n} - pobrnie konkretknego stasza wraz z usunięciem
	git stash drop		- usuniecie stasza
	git stash clear		- usuniecie wszystkich staszów


Usuwanie/cofanie się:
	git revert {id} 	- cofnięcie się do komintu o danym id
	git reset {id}		- powrót do stanu komitu o danym id + pliki do dodania
	git reset {id} --soft   -  ---- || ----  + pliki już w stejdzingu
	git reset {id} --hard   - trwałe usunięcie komitów po danym id !!!!

Zmiana nazwy komitu:
	git commit --amend -m <nowa nazwa>	- nadpisuje nazwę i id komitu

Rebase/kilka zmian jednocześnie:
	git rebase -i HEAD~{n} 		- otwarcie edytora z listą ostanich n-ilości komitów

Logowanie:
	git log --author=<nazwa>	- wyświetlanie logów konkretnego autora
	git log --before="2022-02-02"	- wyświetlanie logów przed podaną datą
	git log --after="2022-01-01"	- wyświetlanie logów po podanej dacie
	git log --after --before	- konkretna czasoprzeszczeń
	git log -p			- wyświetlanie bardziej szczegółowych logów
	git log -stat			- logi wraz z statystykami
	git log --oneline		- wyświetlanie samych tytułów
	git log --graph			- graficzne pokazanie gałęźi
	git log --pretty		- możliwość konkretnego formatowania wyświetlanych informacji
	git log --grep			- wyszukiwanie logów po tekście dopasowania
	git log -- [nazwa]		- szukanie konkretnej nazwy po spacji

Logowanie do CAŁEJ histori zmian na lokalnym repo:
	git reflog		- cała historia zmian
	git reflog -{n}		- ostanie n(ilość) zmian w całej historii


Merge/rebase:
	git rebase [nazwa_brancha] 	- wyrównywanie commitów np. do gałęźi main =>  (moja_gałąź):git rebase main
	git marge  [nazwa_brancha]	- połączenie gałęzi np z main do [moje_zmiany] => (main):git merge moje_zmiany

Squash komitów:
	git rebase -i HEAD~{n} 		- squash dla ostatnich n komitów
	git rebase -i [#komita]		- squash dla komitów występujących po podanym
	git merge --squash [nazwa brancha]	- przygotowanie merge wraz z squashem danej gałęźi (po wykonaniu tej komendy musimy
						zrobić commit)
Cherry-pick/kopiowanie komitów:
	git cherry-pick [#commitu] 	- skopiowanie/zaciągnięcie komitu z innej gałęźi do siebie


Tagowanie:
	git tag 			- wyświetlanie tagów
	git tag v1.0.0			- przypisywanie tagu do obecnego komitu/miejsca gałęźi
	git show v1.0.0			- wyświetalnie opisu/informacji
	git tag v0.9.0 [#commitu]	- przypisywanie tagu do konkretnego commitu
	git tag -f v0.9.0 [#commitu]	- przypisanie istniejącego tagu do jakiegoś innego commitu (np. jak się pomyliliśmy)
	git v0.10.0 [#] -a -m "*****"	- tworzenie tagu wraz z autorem i wiadomością
	git checkout v0.10.0		- przepięcie się na konkretny tag
	git push origin v1.0.0		- wypchnięcie tagu na zewnętrzne repo
	git push --tags			- wypchnięcie wszystkich tagów na zwenętrzne repo
	git -d v0.9.0 			- usunięcie tagu z wewnętrznego repo (jeżeli jest na zewnętrznym to tam najpierw trzeba usunąć)
	git push -d origin v0.9.0	- usunięcie tagu z zewnętrznego repo

Aliasy:
	git config --local alias.[nowaAlias] [komenda]	- nadawanie nowej/własnej nazwy dla jakiś komend, jeżeli jest kilkuczęściowa to dajemy w ""
	git config --local alias.st status		- nadanie nowej/skróconej nazwy dla polecenia git status
	git config --local alias.logpretty "log --oneline --decorator --graph --all"	- przypisnie długiego polecenia do krótkiej nazwy "logpretty"

